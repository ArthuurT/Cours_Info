#include "Outil.h"
#include "Tp1.h"

//Exercice 2
// L1 = (b^n).(a^n).b

	// L1 = (b, n = 0) + ((b^n).(a^n).b, n > 0)

	/**************/

	// S -> b + V (TD)

	// V -> T.b

	// T -> bTa + ba

	/***************/

	// S -> B	+ V  (TP)

	// V -> T.B

	// T -> M + N
	// M -> B.T.A
	// N -> B.A

	// A -> a
	// B -> b




char * sMOT;

int bA(int iDebut, int * piFin);
int bB(int iDebut, int * piFin);
int bC(int iDebut, int * piFin);
int bD(int iDebut, int * piFin);
int bU(int iDebut, int * piFin);
int bV(int iDebut, int * piFin);
int bZ(int iDebut, int * piFin);
int bN(int iDebut, int * piFin);
int bM(int iDebut, int * piFin);
int bS(int iDebut, int * piFin);
int bT(int iDebut, int * piFin);

int bTp1AmorceR = kF;

void Tp1AMORCER(){
	bTp1AmorceR = kV;
}

void Tp1INITIALISER(){
	Assert1("Tp1INITIALISER", bTp1AmorceR);
}

int bA(int iDebut, int * piFin){
		//A->a
		int bSucces = sMOT[iDebut] == 'a';
		*piFin = (bSucces)? iDebut+1 : iDebut;
		return(bSucces);
}

int bB(int iDebut, int * piFin){
		//B-> b
		int bSucces = sMOT[iDebut] == 'b';
		*piFin = (bSucces)? iDebut+1 : iDebut;
		return(bSucces);
}

int bV(int iDebut, int * piFin){
		//V-> T.B
		int iFin, iX;
		int bSucces = bT(iDebut, &iX) && bB(iX, &iFin);
		*piFin = (bSucces)? iFin:iDebut;
		return(bSucces);
}

int bT(int iDebut, int * piFin){
		//T-> M + N
		int iFin;
		int bSucces = bM(iDebut, &iFin) || bN(iDebut, &iFin);
		*piFin = (bSucces)? iFin:iDebut;
		return(bSucces);
}

int bN(int iDebut, int * piFin){
		//N-> B.A
		int iFin, iX;
		int bSucces = bB(iDebut, &iX) && bA(iX, &iFin);
		*piFin = (bSucces)? iFin:iDebut;
		return(bSucces);
}

int bM(int iDebut, int * piFin){
		//M-> B.T.A
		int iFin, iX, iY;
		int bSucces = bB(iDebut, &iX) && bT(iX, &iY) && bA(iY, &iFin);
		*piFin = (bSucces)? iFin:iDebut;
		return(bSucces);
}

int bS(int iDebut, int * piFin){
		//S-> V + B
		int iFin;
		int bSucces = bV(iDebut, &iFin) || bB(iDebut,&iFin);
		*piFin = (bSucces)? iFin:iDebut;
		return(bSucces);
}


void Tp1TESTER(int iTest){
	int bEngendre, iFin, bSucces;
	Assert1("Tp1TESTER0",bTp1AmorceR);
	switch(iTest){
			case 1: sMOT = "bab"; break;
			case 2: sMOT = "bbaab"; break;
			case 3: sMOT = "bbbaaab"; break;
			case 4: sMOT = "b"; break;
			case 5: sMOT = "bbab"; break;
			case 6: sMOT = "bbaaab"; break;
			case 7: sMOT = "bbbbaaaa"; break;
			default: Assert1("Tp1TESTER1",0); break;
	}
	bSucces = bS(0,&iFin);
	bEngendre = bSucces && nChaineLg(sMOT) == iFin;
	printf("%s: %s %s engendré par la grammaire décrite dans \"Grammaire.c\".\n",(bEngendre)? "SUCCES" : "ECHEC", sG(sMOT), sEst(bEngendre));
}
