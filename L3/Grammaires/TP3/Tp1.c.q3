#include "Outil.h"
#include "Tp1.h"
#include "math.h"

//Exercice 1
// L1 = (a+b)+			

	/************** (TD) */

	// S -> T
	// T -> UT + U
	// U -> a + b

	/*************** (TP) */

	// S -> T
	// T -> U + W
	// U -> W.T
	// W -> A + B

	/************** (TP attribué) */

	// S(a,b) -> T(a,b)
	// T(a,b) -> U(a,b) + W(a,b)
	// U(a+n,b+p) -> W(a,b).T(n,p)
	// W(a,b) -> A(a,b) + B(a,b)
	// A(1,0) -> a
	// B(0,1) -> b




char * sMOT;

int bA(int iDebut, int * piFin, int * paAA, int * paAB);
int bB(int iDebut, int * piFin, int * paBA, int * paBB);
int bU(int iDebut, int * piFin, int * paUA, int * paUB);
int bW(int iDebut, int * piFin, int * paWA, int * paWB);
int bT(int iDebut, int * piFin, int * paTA, int * paTB);
int bS(int iDebut, int * piFin, int * paSA, int * paSB);


int bTp1AmorceR = kF;

void Tp1AMORCER(){
	bTp1AmorceR = kV;
}

void Tp1INITIALISER(){
	Assert1("Tp1INITIALISER", bTp1AmorceR);
}



int bA(int iDebut, int * piFin, int * paAA, int * paAB){
		// A(1,0) -> a
		int bSucces = sMOT[iDebut] == 'a';
		*piFin = (bSucces)? iDebut+1 : iDebut;
		if(bSucces){
			*paAA = 1; 
			*paAB = 0;
		}
		return(bSucces);
}

int bB(int iDebut, int * piFin, int * paBA, int * paBB){
		// B(0,1) -> b
		int bSucces = sMOT[iDebut] == 'b';
		*piFin = (bSucces)? iDebut+1 : iDebut;
		if(bSucces){
			*paBA = 0; 
			*paBB = 1;
		}
		return(bSucces);
}

int bU(int iDebut, int * piFin, int * paUA, int * paUB){
		// U(a+n,b+p) -> W(a,b).T(n,p)
		int iFin, iX, paTA, paTB, paWA, paWB;
		int bSucces = bW(iDebut, &iX, &paWA, &paWB) && bT(iX, &iFin, &paTA, &paTB);
		*piFin = (bSucces)? iFin:iDebut;
		if(bSucces){
			*paUA = paWA + paTA; 
			*paUB = paWB + paTB;
		}
		return(bSucces);
}


int bW(int iDebut, int * piFin, int * paWA, int * paWB){
		// W(a,b) -> A(a,b) + B(a,b)
		int iFin;
		int bSucces = bA(iDebut, &iFin, paWA, paWB) || bB(iDebut, &iFin, paWA, paWB);
		*piFin = (bSucces)? iFin:iDebut;
		return(bSucces);
}

int bT(int iDebut, int * piFin, int * paTA, int * paTB){
		// T(a,b) -> U(a,b) + W(a,b)
		int iFin;
		int bSucces = bU(iDebut, &iFin, paTA, paTB) || bW(iDebut, &iFin, paTA, paTB);
		*piFin = (bSucces)? iFin:iDebut;
		return(bSucces);
}

int bS(int iDebut, int * piFin, int * paSA, int * paSB){
		// S(a,b) -> T(a,b)
		int iFin, paTA, paTB;
		int bSucces = bT(iDebut, &iFin, &paTA, &paTB);
		*piFin = (bSucces)? iFin:iDebut;
		if(bSucces){
			*paSA = paTA; 
			*paSB = paTB;
		}
		return(bSucces);
}

void Tp1TESTER(int iTest){
	int bEngendre, iFin, bSucces, baSA, baSB;
	Assert1("Tp1TESTER0",bTp1AmorceR);
	switch(iTest){
			case 1: sMOT = "abbababbaabbbbb"; break;
			case 2: sMOT = "abbaa"; break;
			case 3: sMOT = "ba"; break;
			case 4: sMOT = "bbbaab"; break;
			case 5: sMOT = "baabbaba"; break;
			case 6: sMOT = "aaaa"; break;
			case 7: sMOT = ""; break;
			default: Assert1("Tp1TESTER1",0); break;
	}
	bSucces = bS(0,&iFin,&baSA, &baSB);
	bEngendre = bSucces && nChaineLg(sMOT) == iFin;
	printf("%s: %s %s engendré par la grammaire décrite dans \"Grammaire.c\".\n",(bEngendre)? "SUCCES" : "ECHEC", sG(sMOT), sEst(bEngendre));
	if(bEngendre) printf("Nombre de a = %i :: Nombre de b = %i\n",baSA, baSB);
}
