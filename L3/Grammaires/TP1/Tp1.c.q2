#include "Outil.h"
#include "Tp1.h"

//Exercice 2
// S-> A.B.B + B.A

	// S -> T + U (TD)
	// T -> abb
	// U -> ba

	// S -> T + U (TP)
	// T -> A.B.B
	// U -> B.A
	// A -> a
	// B -> b

char * sMOT;

int bTp1AmorceR = kF;

void Tp1AMORCER(){
	bTp1AmorceR = kV;
}

void Tp1INITIALISER(){
	Assert1("Tp1INITIALISER", bTp1AmorceR);
}

int bA(int iDebut, int * piFin){
	//A->a
	int bSucces = sMOT[iDebut] == 'a';
	*piFin = (bSucces)? iDebut+1 : iDebut;
	return(bSucces);
}

int bB(int iDebut, int * piFin){
	//B->b
	int bSucces = sMOT[iDebut] == 'b';
	*piFin = (bSucces)? iDebut+1 : iDebut;
	return(bSucces);
}

int bT(int iDebut, int * piFin){
	//T->A.B.B
	int iFin, iX, iY;
	int bSucces = bA(iDebut, &iX) && bB(iX, &iY) && bB(iY, &iFin);
	*piFin = (bSucces)? iFin:iDebut;
	return(bSucces);
}

int bU(int iDebut, int * piFin){
	//U->B.A
	int iFin, iX;
	int bSucces = bB(iDebut, &iX) && bA(iX, &iFin);
	*piFin = (bSucces)? iFin:iDebut;
	return(bSucces);
}

int bS(int iDebut, int * piFin){

		int iFin;
		int bSucces = bT(iDebut, &iFin) || bU(iDebut, &iFin);

		*piFin = (bSucces)? iFin:iDebut;
		return(bSucces);
}


void Tp1TESTER(int iTest){
	int bEngendre, iFin, bSucces;
	Assert1("Tp1TESTER0",bTp1AmorceR);
	switch(iTest){
			case 1: sMOT = "aab"; break;
			case 2: sMOT = "aaba"; break;
			case 3: sMOT = "abb"; break;
			case 4: sMOT = "ab"; break;
			case 5: sMOT = "ba"; break;
			case 6: sMOT = "abbb"; break;
			default: Assert1("Tp1TESTER1",0); break;
	}
	bSucces = bS(0,&iFin);
	bEngendre = bSucces && nChaineLg(sMOT) == iFin;
	printf("%s: %s %s engendré par la grammaire décrite dans \"Grammaire.c\".\n",(bEngendre)? "SUCCES" : "ECHEC", sG(sMOT), sEst(bEngendre));
}
